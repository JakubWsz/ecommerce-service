# Common configuration for all profiles
spring:
  application:
    name: customer-write
  main:
    web-application-type: reactive

  # JDBC configuration for event store
  datasource:
    driver-class-name: org.postgresql.Driver
    hikari:
      connection-timeout: 20000
      pool-name: CustomerWriteHikariPool

  # Flyway migration
  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true

  # Kafka configuration for event publishing
  kafka:
    bootstrap-servers: localhost:29092
    schema-registry-url: http://localhost:8081
    producer:
      retries: 3
      properties:
        delivery.timeout.ms: 120000
        request.timeout.ms: 30000
        retry.backoff.ms: 500

# Server settings
server:
  port: 8080
  error:
    include-message: always
    include-binding-errors: always

# Logging configuration
logging:
  level:
    root: INFO
    pl.ecommerce: DEBUG
    org.springframework.web: INFO
    org.springframework.security: INFO
    org.springframework.kafka: INFO
#  elasticsearch:
#    host: elasticsearch
#    port: 9200

# Actuator endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics,env
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
      group:
        liveness:
          include: livenessState
        readiness:
          include: readinessState,db
  tracing:
    sampling:
      probability: 1.0
  prometheus:
    metrics:
      export:
        enabled: true
    tags:
      application: ${spring.application.name}
      environment: ${spring.profiles.active:default}

# OpenAPI documentation
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
  packages-to-scan: pl.ecommerce.customer.write.api

# Event listener configuration
event:
  listener:
    group-id: ${spring.application.name}-group
    topics:
      - customer.registered.event
      - customer.updated.event
      - customer.email-changed.event
      - customer.email-verified.event
      - customer.phone-verified.event
      - customer.address-added.event
      - customer.address-updated.event
      - customer.address-removed.event
      - customer.preferences-updated.event
      - customer.deactivated.event
      - customer.reactivated.event
      - customer.deleted.event

# Alerting configuration
alerts:
  enabled: true
  evaluation-interval: 15s
  critical-email-recipients: operations@example.com,oncall@example.com
  slack-webhook-url: ${SLACK_WEBHOOK_URL:}

# Kafka DLQ configuration
kafka:
  dlq:
    enabled: true
    retry-attempts: 3
    initial-interval-ms: 1000
    multiplier: 2.0
    max-interval-ms: 60000
    retry-interval-ms: 60000
    topics: customer.registered.event.DLT,customer.updated.event.DLT,customer.email-changed.event.DLT,customer.email-verified.event.DLT,customer.phone-verified.event.DLT,customer.address-added.event.DLT,customer.address-updated.event.DLT,customer.address-removed.event.DLT,customer.preferences-updated.event.DLT,customer.deactivated.event.DLT,customer.reactivated.event.DLT,customer.deleted.event.DLT

opentelemetry:
  otlp:
    endpoint: http://otel-collector:4317
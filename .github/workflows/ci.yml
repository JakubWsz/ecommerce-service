name: CI

on:
  pull_request:
    branches: [ develop, master ]
  push:
    branches: [ develop, master ]

env:
  AWS_REGION: eu-central-1
  DOMAIN_NAME: ecommerce.pl

jobs:
  build:
    name: Build, Test & Push Images
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Generate version
        id: version
        run: |
          VERSION="${GITHUB_SHA::7}-$(date +%Y%m%d%H%M%S)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '21'
          cache: 'maven'

      - name: Set up Docker network and configure Kafka
        run: |
          chmod +x .github/workflows/ci/setup-kafka.sh
          .github/workflows/ci/setup-kafka.sh

      - name: Build all modules
        run: mvn --batch-mode clean install -DskipTests

      - name: Run tests
        run: mvn --batch-mode test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & Push images to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          for module in customer-read customer-write; do
            docker build --build-arg MODULE=$module \
              -t $ECR_REGISTRY/ecommerce-$module:$VERSION \
              -t $ECR_REGISTRY/ecommerce-$module:latest .
            docker push $ECR_REGISTRY/ecommerce-$module:$VERSION
            docker push $ECR_REGISTRY/ecommerce-$module:latest
          done

  infra:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'
    env:
      STAGE: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '21'
          cache: 'maven'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install AWS CDK
        run: npm install -g aws-cdk@2

      - name: Deploy AWS Infrastructure
        working-directory: ecommerce-cdk
        run: |
          mvn clean install
          cdk bootstrap
          cdk deploy --all --require-approval never \
            --context stage=${{ env.STAGE }} \
            --context account=${{ secrets.AWS_ACCOUNT_ID }}

      - name: Get EKS cluster config
        run: |
          aws eks update-kubeconfig \
            --name ecommerce-${{ env.STAGE }} \
            --region ${{ env.AWS_REGION }}

      - name: Install CDK8s CLI
        run: npm install -g cdk8s-cli

      - name: Deploy Base Infrastructure to K8s
        working-directory: ecommerce-cdk8s
        env:
          ECR_URI: ${{ steps.login-ecr.outputs.registry }}/ecommerce
          TAG: ${{ needs.build.outputs.version }}
          REPLICAS: ${{ env.STAGE == 'prod' && '3' || '1' }}
        run: |
          mvn clean install
          
          cdk8s synth -a "mvn exec:java -Dexec.mainClass=pl.ecommerce.k8s.BaseInfrastructureMain"
          kubectl apply -f dist/
          
          kubectl wait --for=condition=available --timeout=300s \
            deployment/cert-manager -n cert-manager
          
          cdk8s synth
          kubectl apply -f dist/

  deploy-apps:
    name: Deploy Applications
    runs-on: ubuntu-latest
    needs: [ build, infra ]
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'
    env:
      STAGE: ${{ github.ref == 'refs/heads/master' && 'prod' || 'dev' }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name ecommerce-${{ env.STAGE }} \
            --region ${{ env.AWS_REGION }}

      - name: Install Argo CD CLI
        run: |
          curl -sSL -o argocd \
            https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Create Argo CD Application
        run: |
          # Najpierw sprawdzamy czy aplikacja istnieje
          if ! argocd app get ecommerce-app --grpc-web; then
            argocd app create ecommerce-app \
              --repo ${{ github.server_url }}/${{ github.repository }}.git \
              --revision ${{ github.ref }} \
              --path ecommerce-cdk8s/dist \
              --dest-server https://kubernetes.default.svc \
              --dest-namespace ecommerce \
              --sync-policy automated \
              --self-heal \
              --grpc-web
          fi

      - name: Sync Argo CD Application
        run: |
          argocd app sync ecommerce-app --grpc-web
          argocd app wait ecommerce-app --health --timeout 600 --grpc-web

  test-deployment:
    name: Test Deployment
    runs-on: ubuntu-latest
    needs: deploy-apps
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run smoke tests
        run: |
          ENDPOINT=$(kubectl get ingress ecommerce-ingress -n ecommerce \
            -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          
          for service in customer-read customer-write; do
            echo "Testing $service health..."
            curl -f http://$ENDPOINT/$service/actuator/health || exit 1
          done
          
          echo "All services are healthy!"
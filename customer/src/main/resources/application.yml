# Common configuration for all profiles
spring:
  application:
    name: customer-service
  main:
    web-application-type: reactive

  # MongoDB configuration for EventStore
  data:
    mongodb:
      uri: mongodb://${MONGO_USER:customer_user}:${MONGO_PASSWORD:customer_password}@${MONGO_HOST:mongodb}:${MONGO_PORT:27017}
      database: customer
      authentication-database: admin
      field-naming-strategy: org.springframework.data.mapping.model.CamelCaseAbbreviatingFieldNamingStrategy
      auto-index-creation: true
      dot-replacement: _
    redis:
      timeout: 10000

  # Redis configuration for caching
  redis:
    pool:
      max-active: 8
      max-idle: 8
      min-idle: 2

  # Kafka configuration
  kafka:
    consumer:
      group-id: ${spring.application.name}
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

# Server settings
server:
  port: ${SERVER_PORT:8080}
  shutdown: graceful
  http2:
    enabled: true

# WebClient reactive client configuration
webclient:
  connection-timeout: 5000
  read-timeout: 5000
  write-timeout: 5000

# Monitoring and actuator configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,prometheus,metrics,loggers,env,beans
  endpoint:
    health:
      show-details: always
    prometheus:
      access: unrestricted
  metrics:
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.9, 0.95, 0.99
    tags:
      application: ${spring.application.name}
  prometheus:
    metrics:
      export:
        enabled: true

# Logging configuration
logging:
  level:
    root: INFO
    pl.ecommerce: INFO
    pl.ecommerce.customer: DEBUG
    org.springframework.r2dbc: INFO
    org.springframework.web.reactive.function.client.ExchangeFunctions: DEBUG
    org.springframework.test: DEBUG
  logstash:
    host: ${LOGSTASH_HOST:localhost}
    port: ${LOGSTASH_PORT:5000}

# Resilience4j configuration for circuit breaker, time limiter, and retry
resilience4j:
  circuitbreaker:
    instances:
      default:
        slidingWindowSize: 10
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
        permittedNumberOfCallsInHalfOpenState: 5
  timelimiter:
    instances:
      default:
        timeoutDuration: 5s
  retry:
    instances:
      default:
        maxAttempts: 3
        waitDuration: 1000
        retryExceptions:
          - org.springframework.web.reactive.function.client.WebClientResponseException
          - java.util.concurrent.TimeoutException
          - java.io.IOException

# External services configuration
services:
  product:
    url: ${PRODUCT_SERVICE_URL:http://localhost:8081}
  order:
    url: ${ORDER_SERVICE_URL:http://localhost:8082}
  payment:
    url: ${PAYMENT_SERVICE_URL:http://localhost:8083}
  geolocation-api:
    base-url: https://api.ipgeolocation.io/ipgeo
    api-key: ${GEOLOCATION_API_KEY:demo-key}


---
# Profile: dev
spring:
  config:
    activate:
      on-profile: dev

  # MongoDB configuration
  data:
    data:
      mongodb:
        uri: mongodb://customer_user:customer_password@localhost:27017
        database: customer
        field-naming-strategy: org.springframework.data.mapping.model.CamelCaseAbbreviatingFieldNamingStrategy
        auto-index-creation: true
        dot-replacement: _
    redis:
      port: 6379
      password: redis
      host: localhost

  # Redis configuration
  # Kafka configuration
  kafka:
    bootstrap-servers: localhost:29092

# Logging configuration for dev
logging:
  level:
    pl.ecommerce.customer: DEBUG
    org.springframework.data: DEBUG
    org.springframework.r2dbc: DEBUG

# Enable Swagger UI for dev
springdoc:
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
  api-docs:
    enabled: true

---
# Profile: test
spring:
  config:
    activate:
      on-profile: test

  # MongoDB configuration for tests
  data:
    data:
      mongodb:
        uri: mongodb://customer_user:customer_password@localhost:27017
        database: customer_test
        field-naming-strategy: org.springframework.data.mapping.model.CamelCaseAbbreviatingFieldNamingStrategy
        auto-index-creation: true
        dot-replacement: _
    redis:
      password: redis
      host: localhost
      port: 6379

  # Kafka configuration for tests
  kafka:
    bootstrap-servers: localhost:29092

# Logging configuration for tests
logging:
  level:
    root: INFO
    pl.ecommerce.customer: DEBUG
    org.springframework.test: DEBUG

---
# Profile: prod
spring:
  config:
    activate:
      on-profile: prod

  # MongoDB configuration for production
  data:
    mongodb:
      uri: mongodb://${MONGO_USER:customer_user}:${MONGO_PASSWORD:customer_password}@${MONGO_HOST:mongodb}:${MONGO_PORT:27017}
      database: customer
      field-naming-strategy: org.springframework.data.mapping.model.CamelCaseAbbreviatingFieldNamingStrategy
      auto-index-creation: true
      dot-replacement: _

    redis:
      host: ${REDIS_HOST:redis}
      password: ${REDIS_PASSWORD:redis}
      port: ${REDIS_PORT:6379}

  # Redis configuration for production
  # Kafka configuration for production
  kafka:
    bootstrap-servers: ${KAFKA_SERVERS:kafka:9092}

# Logging configuration for production
logging:
  level:
    root: WARN
    pl.ecommerce.customer: INFO
  logstash:
    host: ${LOGSTASH_HOST:logstash}
    port: ${LOGSTASH_PORT:5000}

# Disable Swagger UI for production
springdoc:
  swagger-ui:
    enabled: false
  api-docs:
    enabled: false

# Security configuration for production
server:
  http2:
    enabled: true
  ssl:
    enabled: ${SSL_ENABLED:false}
    key-store: ${SSL_KEY_STORE:}
    key-store-password: ${SSL_KEY_STORE_PASSWORD:}
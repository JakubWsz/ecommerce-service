services:
  ### DATABASE SERVICES ###

  # PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: ecommerce-postgres
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      # Utworzy bazy: customer, product, vendor, payment
      POSTGRES_MULTIPLE_DATABASES: customer,product,vendor,payment
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/create-multiple-postgresql-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgresql-databases.sh
    networks:
      - backend-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ecommerce-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    networks:
      - backend-network
    depends_on:
      - postgres

  # MongoDB
  mongodb:
    image: mongo:7.0
    container_name: ecommerce-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
      # Skrypt inicjalizacyjny tworzy bazy: customer, product, vendor, payment
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    networks:
      - backend-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh --quiet mongodb:27017/admin -u admin -p admin --authenticationDatabase admin
      interval: 10s
      timeout: 5s
      retries: 5

  # Mongo Express (MongoDB GUI)
  mongo-express:
    image: mongo-express:latest
    container_name: ecommerce-mongo-express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin
      ME_CONFIG_MONGODB_URL: mongodb://admin:admin@mongodb:27017/
    ports:
      - "8081:8081"
    networks:
      - backend-network
    depends_on:
      mongodb:
        condition: service_healthy

  # Redis (for caching)
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis
    command: redis-server --requirepass redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Commander (Redis GUI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ecommerce-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379:0:redis
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    ports:
      - "8082:8081"
    networks:
      - backend-network
    depends_on:
      - redis

  # Redis Insight (Redis GUI)
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: ecommerce-redis-insight
    ports:
      - "8001:8001"
    volumes:
      - redis-insight-data:/db
    networks:
      - backend-network
    depends_on:
      - redis

  ### MESSAGING SERVICES ###

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: ecommerce-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: ecommerce-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - kafka-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # AKHQ (Kafka GUI)
  akhq:
    image: tchiotludo/akhq:latest
    container_name: ecommerce-akhq
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "9000:9000"
    environment:
      AKHQ_CONFIGURATION: |
        micronaut:
          server:
            port: 9000
        akhq:
          connections:
            kafka:
              properties:
                bootstrap.servers: "kafka:9092"
    networks:
      - kafka-network


  ### LOGGING & MONITORING STACK ###

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: ecommerce-otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4321:4317"   # gRPC
      - "4322:4318"   # HTTP
      - "8888:8888"   # Metrics exposition
      - "8889:8889"   # Prometheus exporter
      - "13133:13133" # Health check
    networks:
      - backend-network
      - monitoring-network
    depends_on:
      - jaeger
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:13133"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Jaeger
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: ecommerce-jaeger
    ports:
      - "16686:16686"  # UI
      - "14250:14250"  # Model used by jaeger internally
      - "14268:14268"  # jaeger.thrift via HTTP
      - "14269:14269"  # Health check
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - COLLECTOR_ZIPKIN_HOST_PORT=9411
    networks:
      - backend-network
      - monitoring-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:14269"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.12.0
    container_name: ecommerce-elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=elasticsearch-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - elk-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Logstash
  logstash:
    image: docker.elastic.co/logstash/logstash:8.12.0
    container_name: ecommerce-logstash
    volumes:
      - ../config/logstash/pipeline:/usr/share/logstash/pipeline
      - ../config/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    ports:
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - elk-network
      - backend-network

  # Kibana
  kibana:
    image: docker.elastic.co/kibana/kibana:8.12.0
    container_name: ecommerce-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      elasticsearch:
        condition: service_healthy
    networks:
      - elk-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/api/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Prometheus
  prometheus:
    image: prom/prometheus:v2.49.1
    container_name: ecommerce-prometheus
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - monitoring-network
      - backend-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana
  grafana:
    image: grafana/grafana:10.4.0
    container_name: ecommerce-grafana
    volumes:
      - grafana-data:/var/lib/grafana
      - ../config/grafana/provisioning:/etc/grafana/provisioning
      - ../config/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3000:3000"
    networks:
      - monitoring-network
    depends_on:
      prometheus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Grafana Provisioner
  grafana-provisioner:
    image: curlimages/curl:latest
    container_name: ecommerce-grafana-provisioner
    volumes:
      - ../config/grafana/provisioning:/config
    command: >
      sh -c '
        sleep 30 &&
        curl -X POST -H "Content-Type: application/json" -d @/config/datasources/prometheus-datasource.json http://admin:admin@grafana:3000/api/datasources
      '
    networks:
      - monitoring-network
    depends_on:
      grafana:
        condition: service_healthy
    restart: no

  # Alert Manager
  alertmanager:
    image: prom/alertmanager:v0.26.0
    container_name: ecommerce-alertmanager
    volumes:
      - ./config/alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    ports:
      - "9093:9093"
    networks:
      - monitoring-network
    depends_on:
      - prometheus

volumes:
  # Database volumes
  postgres-data:
  pgadmin-data:
  mongodb-data:
  redis-data:
  redis-insight-data:

  # Messaging volumes
  zookeeper-data:
  zookeeper-logs:
  kafka-data:

  # Monitoring & Logging volumes
  elasticsearch-data:
  prometheus-data:
  grafana-data:

networks:
  backend-network:
    driver: bridge
  elk-network:
    driver: bridge
  monitoring-network:
    driver: bridge
  kafka-network:
    driver: bridge
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "customer-write.fullname" . }}-config
  labels: {"app.kubernetes.io/name": "{{ .Chart.Name }}", "app.kubernetes.io/instance": "{{ .Release.Name }}"}
data:
  application.yml: |
    # Common configuration for all profiles
    spring:
      application:
        name: customer-write
      main:
        web-application-type: reactive

      # JDBC configuration for event store
      datasource:
        driver-class-name: org.postgresql.Driver
        url: jdbc:postgresql://{{ .Release.Name }}-infrastructure-postgres:5432/customer_event_store
        username: postgres
        password: postgres
        hikari:
          connection-timeout: 20000
          pool-name: CustomerWriteHikariPool

      # Flyway migration
      flyway:
        enabled: true
        locations: classpath:db/migration
        baseline-on-migrate: true

      # Kafka configuration for event publishing
      kafka:
        bootstrap-servers: {{ .Release.Name }}-infrastructure-kafka:9092
        schema-registry-url: http://{{ .Release.Name }}-infrastructure-schema-registry:8081
        producer:
          observation-enabled: true
          retries: 3
          properties:
            delivery.timeout.ms: 120000
            request.timeout.ms: 30000
            retry.backoff.ms: 500
        consumer:
          observation-enabled: true
        listener:
          observation-enabled: true

    # Server settings
    server:
      port: 8080
      error:
        include-message: always
        include-binding-errors: always

    # Logging configuration
    logging:
      logstash:
        host: {{ .Release.Name }}-infrastructure-logstash
        port: 5000
      level:
        root: INFO
        pl.ecommerce: DEBUG
      pattern:
        level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

    # Actuator endpoints
    management:
      endpoints:
        web:
          exposure:
            include: health,info,prometheus,metrics,loggers
      endpoint:
        health:
          show-details: always
          probes:
            enabled: true
          group:
            liveness:
              include: livenessState
            readiness:
              include: readinessState,db
      tracing:
        sampling:
          probability: 1.0
        enabled: true
        propagation:
          type: w3c
      observations:
        http:
          server:
            requests:
              enabled: true
      prometheus:
        metrics:
          export:
            enabled: true
        tags:
          application: ${spring.application.name}
          environment: ${spring.profiles.active:default}
        distribution:
          percentiles-histogram:
            http.server.requests: true
          percentiles:
            http.server.requests: 0.5, 0.9, 0.95, 0.99

    # OpenAPI documentation
    springdoc:
      api-docs:
        path: /api-docs
      swagger-ui:
        path: /swagger-ui.html
      packages-to-scan: pl.ecommerce.customer.write.api

    # Event listener configuration
    event:
      listener:
        group-id: ${spring.application.name}-group
        topics:
          - customer.registered.event
          - customer.updated.event
          - customer.email-changed.event
          - customer.email-verified.event
          - customer.phone-verified.event
          - customer.address-added.event
          - customer.address-updated.event
          - customer.address-removed.event
          - customer.preferences-updated.event
          - customer.deactivated.event
          - customer.reactivated.event
          - customer.deleted.event

    # Alerting configuration
    alerts:
      enabled: true
      evaluation-interval: 15s
      critical-email-recipients: operations@example.com,oncall@example.com
      slack-webhook-url: ${SLACK_WEBHOOK_URL:}

    # Kafka DLQ configuration
    kafka:
      dlq:
        enabled: true
        retry-attempts: 3
        initial-interval-ms: 1000
        multiplier: 2.0
        max-interval-ms: 60000
        retry-interval-ms: 60000
        topics: customer.registered.event.DLT,customer.updated.event.DLT,customer.email-changed.event.DLT,customer.email-verified.event.DLT,customer.phone-verified.event.DLT,customer.address-added.event.DLT,customer.address-updated.event.DLT,customer.address-removed.event.DLT,customer.preferences-updated.event.DLT,customer.deactivated.event.DLT,customer.reactivated.event.DLT,customer.deleted.event.DLT

    opentelemetry:
      sdk:
        disabled: false
      service:
        name: ${spring.application.name}
      traces:
        exporter: otlp
      metrics:
        exporter: prometheus
      otlp:
        endpoint: http://{{ .Release.Name }}-infrastructure-otel-collector:4317
        protocol: grpc

    ---
    # Development environment configuration
    spring:
      config:
        activate:
          on-profile: {{ .Values.global.environment }}

      # JDBC configuration for event store
      datasource:
        url: jdbc:postgresql://{{ .Release.Name }}-infrastructure-postgres:5432/customer_event_store
        username: postgres
        password: postgres
        hikari:
          maximum-pool-size: 5
          minimum-idle: 2
          idle-timeout: 300000

    logging:
      level:
        root: INFO
        pl.ecommerce: DEBUG
      pattern:
        level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

    deployment:
      environment: {{ .Values.global.environment }}

    # Server settings - verbose errors for development
    server:
      error:
        include-stacktrace: always

    # Actuator endpoints - all for development
    management:
      endpoints:
        web:
          exposure:
            include: '*'

    # OpenAPI documentation - extended options for development
    springdoc:
      swagger-ui:
        operationsSorter: method
        tagsSorter: alpha
        displayRequestDuration: true
      show-actuator: true

    # Event listener configuration
    event:
      listener:
        group-id: ${spring.application.name}-group-{{ .Values.global.environment }}

    # Alerting configuration - disabled for development
    alerts:
      enabled: false
      critical-email-recipients: dev@example.com

    # Kafka DLQ configuration - shorter intervals for development
    kafka:
      dlq:
        retry-attempts: 3
        max-interval-ms: 10000
        retry-interval-ms: 5000

    ---
    # Production environment configuration
    spring:
      config:
        activate:
          on-profile: prod

      # JDBC configuration for event store
      datasource:
        url: jdbc:postgresql://{{ .Release.Name }}-infrastructure-postgres:5432/customer_event_store
        username: ${DB_USERNAME:postgres}
        password: ${DB_PASSWORD:postgres}
        hikari:
          maximum-pool-size: 20
          minimum-idle: 10
          idle-timeout: 300000

      # Kafka configuration for production
      kafka:
        bootstrap-servers: {{ .Release.Name }}-infrastructure-kafka:9092
        schema-registry-url: http://{{ .Release.Name }}-infrastructure-schema-registry:8081
        producer:
          retries: 5
          properties:
          # Production specific SSL configuration (commented out for Kubernetes setup)
          #security.protocol: SSL
          #ssl.truststore.location: ${KAFKA_TRUSTSTORE_LOCATION}
          #ssl.truststore.password: ${KAFKA_TRUSTSTORE_PASSWORD}
          #ssl.keystore.location: ${KAFKA_KEYSTORE_LOCATION}
          #ssl.keystore.password: ${KAFKA_KEYSTORE_PASSWORD}
          #ssl.key.password: ${KAFKA_KEY_PASSWORD}

    deployment:
      environment: production

    # Server settings - secure for production
    server:
      error:
        include-message: never
        include-binding-errors: never
      # SSL configuration (commented out for Kubernetes setup)
      #ssl:
      #  enabled: true
      #  key-store: ${SSL_KEYSTORE_PATH}
      #  key-store-password: ${SSL_KEYSTORE_PASSWORD}
      #  key-store-type: PKCS12
      #  key-alias: customer-write

    # Actuator endpoints - restricted for production
    management:
      endpoints:
        web:
          exposure:
            include: health,info,prometheus
          base-path: /management
      endpoint:
        health:
          show-details: when_authorized
      tracing:
        sampling:
          probability: 0.1
      prometheus:
        tags:
          environment: prod

    # OpenAPI documentation - disabled for production
    springdoc:
      api-docs:
        enabled: false
      swagger-ui:
        enabled: false

    # Event listener configuration
    event:
      listener:
        group-id: ${spring.application.name}-group-prod

    # Alerting configuration - real endpoints for production
    alerts:
      enabled: true

    # Kafka DLQ configuration - more retries for production
    kafka:
      dlq:
        retry-attempts: 5
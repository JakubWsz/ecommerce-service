apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-postgres
  labels:
    {{ include "infrastructure.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
spec:
  ports:
    - port: 5432
      targetPort: 5432
      protocol: TCP
      name: postgres
  selector:
    {{ include "infrastructure.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Release.Name }}-postgres-secret
  labels:
    {{ include "infrastructure.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
type: Opaque
data:
  postgres-password: {{ .Values.infrastructure.postgres.environment.POSTGRES_PASSWORD | b64enc | quote }}
  postgres-user: {{ .Values.infrastructure.postgres.environment.POSTGRES_USER | b64enc | quote }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-postgres-init
  labels:
    {{ include "infrastructure.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
data:
  create-multiple-postgresql-databases.sh: |
    #!/bin/bash

    set -e
    set -u

    function create_user_and_database() {
    	local database=$1
    	echo "  Creating user and database '$database'"
    	psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" <<-EOSQL
    	    CREATE DATABASE $database;
    	    GRANT ALL PRIVILEGES ON DATABASE $database TO $POSTGRES_USER;
    EOSQL
    }

    if [ -n "$POSTGRES_MULTIPLE_DATABASES" ]; then
    	echo "Multiple database creation requested: $POSTGRES_MULTIPLE_DATABASES"
    	for db in $(echo $POSTGRES_MULTIPLE_DATABASES | tr ',' ' '); do
    		create_user_and_database $db
    	done
    	echo "Multiple databases created"
    fi
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Release.Name }}-postgres
  labels:
    {{ include "infrastructure.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgres
spec:
  serviceName: {{ .Release.Name }}-postgres
  replicas: 1
  selector:
    matchLabels:
      {{ include "infrastructure.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: postgres
  template:
    metadata:
      labels:
        {{ include "infrastructure.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: postgres
    spec:
      securityContext:
        fsGroup: 999
      containers:
        - name: postgres
          image: "{{ .Values.infrastructure.postgres.image.repository }}:{{ .Values.infrastructure.postgres.image.tag }}"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
              name: postgres
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgres-secret
                  key: postgres-password
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Release.Name }}-postgres-secret
                  key: postgres-user
            - name: POSTGRES_MULTIPLE_DATABASES
              value: {{ .Values.infrastructure.postgres.environment.POSTGRES_MULTIPLE_DATABASES }}
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: postgres-init-scripts
              mountPath: /docker-entrypoint-initdb.d
          resources:
            {{ toYaml .Values.infrastructure.postgres.resources | nindent 12 }}
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 3
            failureThreshold: 1
      volumes:
        - name: postgres-init-scripts
          configMap:
            name: {{ .Release.Name }}-postgres-init
            defaultMode: 0755
  volumeClaimTemplates:
    - metadata:
        name: postgres-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: {{ .Values.global.storageClass }}
        resources:
          requests:
            storage: {{ .Values.infrastructure.postgres.persistence.size }}
{{- if .Values.infrastructure.kafka.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: {{ include "infrastructure.fullname" . }}-kafka
  labels:
    {{ include "infrastructure.labels" . | nindent 4 }}
    app.kubernetes.io/component: kafka
spec:
  type: {{ .Values.infrastructure.kafka.service.type }}
  ports:
    {{- range .Values.infrastructure.kafka.service.ports }}
    - port: {{ .port }}
      targetPort: {{ .targetPort }}
      protocol: TCP
      name: {{ .name }}
    {{- end }}
  selector:
    {{ include "infrastructure.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: kafka
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "infrastructure.fullname" . }}-kafka
  labels:
    {{ include "infrastructure.labels" . | nindent 4 }}
    app.kubernetes.io/component: kafka
spec:
  serviceName: {{ include "infrastructure.fullname" . }}-kafka
  replicas: 1
  selector:
    matchLabels:
      {{ include "infrastructure.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: kafka
  template:
    metadata:
      labels:
        {{ include "infrastructure.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: kafka
    spec:
      initContainers:
        - name: wait-for-zookeeper
          image: "busybox:latest"
          command: ["sh", "-c", "until nc -z {{ include "infrastructure.fullname" . }}-zookeeper {{ .Values.infrastructure.zookeeper.service.port }}; do echo waiting for zookeeper; sleep 2; done;"]
      containers:
        - name: kafka
          image: "{{ .Values.infrastructure.kafka.image.repository }}:{{ .Values.infrastructure.kafka.image.tag }}"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9092
              name: kafka
            - containerPort: 29092
              name: kafka-host
          env:
            - name: KAFKA_BROKER_ID
              value: "{{ .Values.infrastructure.kafka.environment.KAFKA_BROKER_ID }}"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "{{ include "infrastructure.fullname" . }}-zookeeper:{{ .Values.infrastructure.zookeeper.service.port }}"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://{{ include "infrastructure.fullname" . }}-kafka:9092,PLAINTEXT_HOST://localhost:29092"
            - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              value: "{{ .Values.infrastructure.kafka.environment.KAFKA_LISTENER_SECURITY_PROTOCOL_MAP }}"
            - name: KAFKA_INTER_BROKER_LISTENER_NAME
              value: "{{ .Values.infrastructure.kafka.environment.KAFKA_INTER_BROKER_LISTENER_NAME }}"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "{{ .Values.infrastructure.kafka.environment.KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR }}"
            - name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              value: "{{ .Values.infrastructure.kafka.environment.KAFKA_AUTO_CREATE_TOPICS_ENABLE }}"
            - name: KAFKA_DELETE_TOPIC_ENABLE
              value: "{{ .Values.infrastructure.kafka.environment.KAFKA_DELETE_TOPIC_ENABLE }}"
          volumeMounts:
            - name: kafka-data
              mountPath: /var/lib/kafka/data
          resources:
            {{ toYaml .Values.infrastructure.kafka.resources | nindent 12 }}
          livenessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - "kafka-topics --bootstrap-server localhost:9092 --list"
            initialDelaySeconds: 90
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
            startPeriod: 30
          readinessProbe:
            exec:
              command:
                - /bin/bash
                - -c
                - "kafka-topics --bootstrap-server localhost:9092 --list"
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: {{ .Values.global.storageClass }}
        resources:
          requests:
            storage: {{ .Values.infrastructure.kafka.persistence.size }}
{{- end }}
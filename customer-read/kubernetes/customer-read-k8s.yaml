apiVersion: apps/v1
kind: Deployment
metadata:
  name: customer-read
  labels:
    app: customer-read
spec:
  replicas: 1
  selector:
    matchLabels:
      app: customer-read
  template:
    metadata:
      labels:
        app: customer-read
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/actuator/prometheus"
        prometheus.io/port: "8080"
    spec:
      containers:
        - name: customer-read
          image: ${DOCKER_REGISTRY}/customer-read:latest
          ports:
            - containerPort: 8080
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: "prod"
            - name: MONGO_HOST
              valueFrom:
                configMapKeyRef:
                  name: mongodb-config
                  key: host
            - name: MONGO_PORT
              valueFrom:
                configMapKeyRef:
                  name: mongodb-config
                  key: port
            - name: MONGO_DB
              valueFrom:
                configMapKeyRef:
                  name: mongodb-config
                  key: database
            - name: MONGO_USER
              valueFrom:
                secretKeyRef:
                  name: mongodb-secrets
                  key: username
            - name: MONGO_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secrets
                  key: password
            - name: KAFKA_SERVERS
              valueFrom:
                configMapKeyRef:
                  name: kafka-config
                  key: bootstrap-servers
            - name: SCHEMA_REGISTRY_URL
              valueFrom:
                configMapKeyRef:
                  name: kafka-config
                  key: schema-registry-url
            - name: ELASTICSEARCH_HOST
              valueFrom:
                configMapKeyRef:
                  name: elasticsearch-config
                  key: host
            - name: LOGSTASH_HOST
              value: "logstash-service"
            - name: LOGSTASH_PORT
              value: "5000"
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8080
            initialDelaySeconds: 60
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 15
          resources:
            limits:
              cpu: "1"
              memory: "1Gi"
            requests:
              cpu: "500m"
              memory: "512Mi"
---
apiVersion: v1
kind: Service
metadata:
  name: customer-read-service
spec:
  selector:
    app: customer-read
  ports:
    - port: 80
      targetPort: 8080
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-config
data:
  host: "mongodb"
  port: "27017"
  database: "customer"
---
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secrets
type: Opaque
data:
  username: Y3VzdG9tZXJfdXNlcg==  # Base64 encoded "customer_user"
  password: Y3VzdG9tZXJfcGFzc3dvcmQ=  # Base64 encoded "customer_password"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kafka-config
data:
  bootstrap-servers: "kafka:9092"
  schema-registry-url: "http://schema-registry:8081"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-config
data:
  host: "elasticsearch"
  port: "9200"